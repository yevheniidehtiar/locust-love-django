stages:
  - lint
  - build
  - smoke_test
  - test_deploy

default:
  image: python:3.11-slim

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs" # Required for Docker-in-Docker

cache:
  paths:
    - .cache/pip
    - venv/

lint:
  stage: lint
  script:
    - pip install -e ."[dev]" # Install project with dev dependencies (includes ruff)
    - pip install -r django-code-smells/django_code_smells/requirements.txt # Install django app dependencies
    - pip install -e http_header_profiling_middleware # Install middleware
    - make lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "master"

build_images:
  stage: build
  image: docker:latest # Use Docker image for Docker commands
  services:
    - docker:dind # Docker-in-Docker service
  before_script:
    - docker info # Print Docker info for debugging
    - until docker ps; do sleep 1; done # Wait for Docker daemon to be ready
  script:
    - make docker-build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "master"

smoke_test_mr:
  stage: smoke_test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker info
    - until docker ps; do sleep 1; done
  script:
    - make docker-up
    # The healthcheck in docker-compose.yml for the 'django' service will determine success.
    # We might need to add a small delay or a specific check if the healthcheck isn't sufficient.
    # For now, we assume 'docker-compose up' will wait for healthchecks or fail if they don't pass.
    # Consider adding a check here like: docker compose ps --filter "status=healthy" --filter "name=django" | grep django
    # Or checking logs for successful startup.
    # For now, let's keep it simple and rely on the docker-compose healthcheck implicitly.
    - echo "Services started. Healthcheck in docker-compose.yml will verify Django service."
    - make docker-down # Clean up services
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test_deploy_master:
  stage: test_deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker info
    - until docker ps; do sleep 1; done
  script:
    - make docker-up
    - echo "Services started. Proceeding with Locust tests..."
    # Placeholder for Locust command. This will likely need a new 'make' target.
    # Example: docker compose exec locust locust --host=http://django:8000 --headless -u 10 -r 1 -t 1m --exit-code-on-error 1
    # We will refine this command or the make target in a subsequent step if necessary.
    # For now, let's assume a 'make locust-ci-run' target will be created.
    - make locust-ci-run 
    - make docker-down # Clean up services
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
